提议更改 Go
介绍
Go项目的开发过程是设计驱动的。必须首先讨论对语言、库或工具的重大更改（包括主存储库和所有 golang.org/x 存储库中的 API 更改，以及对 go 命令的命令行更改），有时还需要正式记录，在它们得以实施之前。

本文档描述了对 Go 项目提出、记录和实施变更的过程。

要了解有关 Go 的起源和开发过程的更多信息，请参阅 GopherCon 2015 的演讲《Go 的诞生》、《Go 的演变》和《Go、开源、社区》。

提案流程
提案流程是审查提案并决定接受或拒绝提案的过程。

提案作者创建一个描述提案的简短问题。
注意：此时不需要设计文档。
注意：只需添加提案标签即可将非提案问题转变为提案。
注意：语言更改应遵循单独的模板

关于问题跟踪器的讨论旨在将提案分为以下三个结果之一：

接受建议，或
拒绝提案，或
索要设计文档。
如果提案被接受或拒绝，则该过程完成。否则，预计讨论将确定应在更详细的设计中解决的问题。

提案作者编写了一份设计文档，以制定拟议设计的细节并解决初步讨论中提出的问题。

一旦对设计文档的评论和修订结束，就会对该问题进行最终讨论，以达成以下两个结果之一：

接受建议或
拒绝提议。
提案被接受或拒绝后（无论是在步骤 2 或步骤 4 之后），实施工作将以与任何其他贡献相同的方式进行。

细节
目标
确保提案得到适当、公平、及时、记录的评估，并有明确的答案。
使过去的提案易于查找，避免重复工作。
如果需要一份设计文档，请确保贡献者知道如何编写一份好的设计文档。
定义
提案是作为 GitHub 问题提交的建议，通过提案标签进行标识。
设计文档是提案的扩展形式，是在提案需要更仔细的解释和考虑时编写的。
范围
提案流程应用于对语言、库和工具的任何显着更改或添加。 “值得注意”包括主存储库和所有 golang.org/x 存储库中的 API 更改，以及 go 命令的命令行更改。它还包括现有功能中可见的行为变化。由于提案以提交问题开始（并且通常结束），因此即使是很小的更改也可以在适当的情况下通过提案流程。决定什么是合适的是判断的问题，我们将通过经验进行完善。如有疑问，请提交提案。

有一个简短的变更列表，这些变更通常不属于提案流程的范围：

在内部包中更改 API，因为这些 API 不公开可见。
在 golang.org/x/build 中进行 API 或命令行更改，因为那是运行 Go 项目的代码，而不是供用户导入和依赖。
在 golang.org/x/sys 中添加新的系统调用号或直接系统调用包装器（//sys 行）。
添加新的 C 等效数据结构来支持这些系统调用。
同样，如果有疑问，请提交提案。

兼容性
为 Go 版本 1.x 编写的程序必须继续编译并与 Go 1 的未来版本一起使用。Go 1 兼容性文档描述了我们对 Go 用户对 Go 1.x 的未来做出的承诺。任何拟议的变更都不得违背这一承诺。

语言变化
2018 年，我们启动了 Go 2 流程，在此期间我们可能会更改语言，如 Go 博客中所述。语言变更应遵循此处描述的提案流程。正如博客文章中所解释的，语言更改提案应该

解决了对很多人来说很重要的问题，
对其他人的影响最小，并且
提供清晰且易于理解的解决方案。
提案应遵循 Go 2 模板。请参阅 Go 2 审查记录和发行说明，了解最近语言更改的示例。

设计文件
如上所述，一些（但不是全部）提案需要在设计文件中详细阐述。

设计文档应以 design/NNNN-shortname.md 的形式签入提案存储库，其中 NNNN 是 GitHub 问题编号，shortname 是短名称（最多由几个破折号分隔的单词）。使用 git clone https://go.googlesource.com/proposal 克隆此存储库，并遵循 Go 的常规 Gerrit 工作流程。

设计文档应遵循模板。

设计文档应解决初步讨论期间提出的任何具体问题。

预计设计文档可能会经过多次签入修订。新的设计文档作者可能会与设计文档“牧羊人”配对，以帮助处理文档。

为了便于使用 Gerrit 进行审查，设计文档应围绕 80 列标记。每个句子都应该换行，以便可以准确地进行注释并保持差异更短。

在 Emacs 中，从该目录加载 fill.el 将会以这种方式生成填充段落格式文本。
对 Gerrit CL 的评论应仅限于与提案本身准备相关的语法、拼写或程序错误。所有其他评论均应针对相关 GitHub 问题进行处理。

经验丰富的提交者快速入门
有经验的提交者确信特定提案需要设计文档，可以跳过步骤 1 和 2，并将设计文档包含在初始问题中。

在最坏的情况下，跳过这些步骤只会导致不必要的设计文档。

提案审核
一组 Go 团队成员大约每周举行一次“提案审查会议”，以审查待决提案。

审查会议的主要目标是通过抄送相关开发人员、提出重要问题、查明失败的讨论以及总体上尝试引导讨论就结果达成一致，确保提案得到正确人员的关注。讨论本身预计将在问题跟踪器上进行，以便任何人都可以参与。

提案审查会议还确定已达成共识的问题，并且流程可以推进到下一步（通过标记提案已接受或拒绝或要求提供设计文档）。

每周会议结束后，会议纪要会发布到 golang.org/s/proposal-mines 上，以便任何对正在积极考虑的提案感兴趣的人都可以关注该问题。

提案问题在 Go 问题跟踪器的提案项目中进行跟踪。提案的当前状态由该项目中的列捕获，如下所述。

提案审核小组可以自行决定对不需要经历所有阶段的提案进行例外处理，将其快速跟踪到可能接受/可能拒绝甚至接受/拒绝，例如不值得全面审核的提案或者由于待发布而需要快速考虑。

传入
新提案将添加到“传入”列中。

每周提案审查会议旨在审查“活跃”、“可能接受”和“可能拒绝”栏中的所有问题。如果还有剩余时间，则来自“传入”的提案将被选择移至“活动”。

将提案保留在“传入”中，直到可以将注意力集中在它们上（此时它们会转移到“活动”，然后继续）确保在将活动提案转移到“已接受”或“已拒绝”方面取得进展，因此我们可以避免收到活锁，在这种情况下，接受新工作会阻止完成旧工作。

积极的
每周提案会议都会审查“活跃”栏中的问题，以观察讨论中是否出现共识。提案审查小组还可以发表评论、提出建议、提出澄清问题，并尝试重述提案，以确保每个人都同意正在讨论的内容。

可能接受
如果问题讨论似乎已达成接受提案的共识，则提案审核小组会将问题移至“可能接受”列，并发布评论指出该更改。这标志着可能改变共识认可的评论的最后时期。

可能下降
如果提案讨论似乎已达成拒绝该提案的共识，则提案审核小组会将问题移至“可能拒绝”列。如果提案审查小组确定不可能达成共识并且默认不接受提案是适当的，则问题也可能会被移至“可能拒绝”。

正如“可能接受”一样，该小组发布了一条评论，指出了这一变化，这标志着可能改变共识认可的评论的最后时期。

公认
提案移至“可能接受”一周后，如果共识没有发生变化，提案审核小组会将提案移至“已接受”列。如果在那一周发生重大讨论，提案审核小组可能会将提案保留在“可能接受”状态再一周，甚至将提案移回“有效”状态。

一旦提案被标记为“已接受”，就会应用“提案已接受”标签，将其从提案里程碑移至工作里程碑，并且问题将重新用于跟踪实施提案的工作。

默认工作里程碑是 Backlog，表示该工作适用于 Go 版本本身，但不适用于特定版本。另一个常见的下一个里程碑是未发布的，用于不属于任何 Go 版本的工作（例如，不在标准版本中提供的 golang.org/x 部分的工作）。

拒绝
提案移至“可能拒绝”一周后，如果共识没有发生变化，提案审核小组就会将该提案移至“已拒绝”列。如果在那周发生重大讨论，提案审核小组可能会将提案置于“可能拒绝”状态再持续一周，甚至将提案移回“有效”状态。一旦提案被标记为已拒绝，则该提案将被关闭。

因重复而被拒绝
如果提案与之前决定的提案重复，则提案审核组可能会将该提案作为重复提案拒绝，而不会进入“有效”或“可能拒绝”阶段。

一般来说，我们重新考虑先前决定的提案的方法遵循 John Ousterhout 在他的文章“开放决策”中的建议，特别是“重新考虑”部分。

因不可行而被拒绝
如果提案直接与语言或包的核心设计相矛盾，或者提案无法有效实施或根本无法实施，则提案审查小组可能会因不可行而拒绝该提案，而无需经过“积极”或“可能拒绝”阶段。

如果其他人仍然普遍感兴趣，或者讨论可能会产生可行的提案，则该提案也可以保持开放并继续讨论。

因撤回而被拒绝
如果提案在原作者的评论中被关闭或撤回，则提案审核小组可能会拒绝该提案，因为该提案已被撤回，而无需进入“活跃”或“可能拒绝”阶段。

如果其他人仍然普遍感兴趣，该提案也可以保持开放并继续讨论。

因已过时而被拒绝
如果提案由于自提交提案以来对 Go 进行的更改而过时，则提案审核组可能会因为过时而拒绝该提案，而无需进入“活跃”或“可能拒绝”阶段。

如果其他人似乎仍然有普遍兴趣，或者讨论可能会产生不同的、未过时的提案，则该提案也可以保持开放状态并继续讨论。

抓住
如果提案的讨论需要设计修订或需要几周或更长时间才能获得的附加信息，提案审核小组会将提案移至“保留”列，并注明正在等待的内容。一旦准备就绪，任何可以编辑问题跟踪器的人都可以将提案移回“活动”列，以便在下一次提案审核会议上考虑。

共识与分歧
提案流程的目标是及时就结果达成普遍共识。

如果提案审查无法在问题跟踪器上的问题讨论中达成普遍共识，通常的结果是提案被拒绝。提案审查可能无法达成普遍共识，但很明显该提案不应被彻底拒绝。举一个例子，人们可能一致认为某个问题的某种解决方案很重要，但对于应该采用两种相互竞争的解决方案中的哪一种却没有达成共识。

如果提案审核小组无法达成共识，也无法确定提案的下一步，则有关前进道路的决定将传递给 Go 架构师（目前为 gri@、iant@ 和 rsc@），他们审核讨论并旨在达成一致他们之间达成共识。如果是这样，他们会记录该决定及其对该问题的理由。

如果架构师之间无法达成共识（这种情况更不寻常），仲裁者（目前为 rsc@）将审查讨论并决定下一步，记录该决定及其对该问题的理由。

帮助
如果您需要此过程的帮助，请通过发布到 golang-dev 邮件列表来联系 Go 贡献者。 （请注意，该列表是经过审核的，并且首次发帖者在其消息被审核期间应该会出现延迟。）

要了解如何为 Go 做出贡献，请参阅贡献指南。